/*global jQuery*/
/**
 * electoral-commission
 * Global JS
 *
 * version: 0.0.1
 * file:    global.min.js
 * author:  Arkadiusz Chatys achatys@squiz.pl

/*
 * Table of Contents
 *
 * 1. Mobile view changes
 * 2. Flexbox fallback
 * 3. Full page banner
 * 4. Get URL GET Parameter
 * 5. Cookies
 *  5.1 Sets Cookies
 *  5.2 Gets Cookies
 * 6. Location Results
 *  6.1 Fetches election information based on the postcode
 *  6.2 Prints election information based on the postcode
 *  6.3 Prints council information based on the postcode
 *  6.4 Data for particular postcode
 *  6.5 Upcoming Elections Template
 *  6.6 Polling stations address
 *  6.7 Nearest Registration Office address

 */
'use strict';
/*
--------------------
Global
--------------------
*/
//  Declare JS Enabled.

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

$('body').removeClass('no-js').addClass('js-enabled');

// 1. Mobile view changes
// Changes for mobile view under 768 pixels.
// Appending elements to other places in DOM
var mobileViewChanges = function mobileViewChanges() {
    var header = $('.header'),
        languages = $('.header__languages'),
        searchBar = $('.header__search'),
        logotype = $('.header__logotype'),
        logotypeSubtitle = $('.header__logotype--subtitle'),
        navigation = $('.header__navigation');

    if ($(window).width() < 769) {
        logotype.before(languages);
        languages.before(logotypeSubtitle);
        searchBar.before(navigation);
    } else {
        searchBar.after(languages);
        header.append(navigation);
        logotype.append(logotypeSubtitle);
    }
};

// 2. Flexbox fallback
// Gives .same-height__item elements equal height
var flexboxBehaviour = debounce(function () {
    if ($(window).width() >= 768 && $('.same-height__item').length > 0) {
        $(".same-height__item").attr("style", "");

        var heights = $(".same-height__item").map(function () {
            return $(this).outerHeight();
        }).get(),
            maxHeight = Math.max.apply(null, heights);
        $(".same-height__item").outerHeight(maxHeight);
    }

    if ($(window).width() < 768) {
        $(".same-height__item").attr("style", "");
    }
}, 250);

// 3. Full page banner
// Takes height of window and makes banner full page big
var fullPageBanner = debounce(function () {
    var banner = $('.homepage .masthead'),
        windowSize = $(window).height(),
        headerSize = $('header').height(),
        cookies = $('.cookies-message');

    var cookiesSize = $('.cookies-message').height();

    if (cookies.hasClass('no-height')) {
        cookiesSize = 0;
    }

    if ($(window).width() >= 768 && banner.length > 0) {
        banner.height(windowSize - headerSize - cookiesSize);
    }
}, 250);

// 4. Get URL GET Parameter
var getUrlParameter = function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
};

// 5. Cookies

// 5.1 Sets Cookies
var setCookie = function setCookie(cname, cvalue, exdays) {
    var d = new Date(),
        expires = void 0;

    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    expires = "expires=" + d.toGMTString();
    document.cookie = cname + "=" + cvalue + "; " + expires + "; path=/";
};

// 5.2 Gets Cookies
var getCookie = function getCookie(c_name) {
    var c_start = void 0,
        c_end = void 0;

    if (document.cookie.length > 0) {
        c_start = document.cookie.indexOf(c_name + "=");
        if (c_start !== -1) {
            c_start = c_start + c_name.length + 1;
            c_end = document.cookie.indexOf(";", c_start);
            if (c_end === -1) {
                c_end = document.cookie.length;
            }
            return unescape(document.cookie.substring(c_start, c_end));
        }
    }
    return "";
};

// 6. Location Results

var formatDate = function formatDate(date) {
    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();

    return day + ' ' + monthNames[monthIndex] + ' ' + year;
};

// 6.1 Fetches election information from given postcode
// This passes the returned response into printDataLocalArea() and
// printDataElectoralServices() which parse and print the relevant information
var loadYourLocalArea = function loadYourLocalArea() {
    if ($('#nearestRegistrationOffice').length > 0) {
        jQuery.ajax({
            dataType: "json",
            url: getDC,
            data: "postcode=" + getUrlParameter('query'),
            success: function success(data) {
                // console.log(data);
                printDataLocalArea(data);
                printDataElectoralServices(data);
            }
        });
    }
};

// 6.2 Prints election information based on the postcode
var printDataLocalArea = function printDataLocalArea(data) {
    // Prepare some conditions
    var customFinder = null;
    var onePollingStation = null;
    var addressPicker = data.address_picker ? data.address_picker : false;
    var addresses = data.addresses && data.addresses.length > 0 ? data.addresses : null;
    var pollingStation = null;

    // Check for election dates
    var ballots = [];
    var dates = data.dates;
    if (!addressPicker) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = dates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var date = _step.value;

                // Collect ballots
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = date.ballots[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var _ballot = _step4.value;

                        if (!_ballot.ballot_paper_id.includes("europarl")) {
                            ballots.push(_ballot);
                        }
                    }
                    // Get the Custom Finder href
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                var _pollingStation = date.polling_station;
                if (_pollingStation.custom_finder) {
                    customFinder = _pollingStation.custom_finder.trim().replace(" ", "+");
                }
                // Get the Polling Station
                if (_pollingStation.polling_station_known == true) {
                    onePollingStation = _pollingStation.station;
                }
                // Get all Notifications
                var notifications = date.notifications;
                if (!!notifications) {
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = notifications[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var notification = _step5.value;

                            var _inject = '<h4 id="' + notification.type + '">' + notification.title + ':</h4>\n                         <p>' + notification.detail + ' <a class="link-icon" href="' + notification.url + '" title="Open details externally" target="_blank"> </a></p>';
                            $('#onePollingStation-notifications').append(_inject);
                            $('#empty-notifications').append(_inject);
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }
                }
            }

            // BALLOTS
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        if (ballots.length > 0) {
            ballots = ballots.sort(function (a, b) {
                var dateA = new Date(a.poll_open_date),
                    dateB = new Date(b.poll_open_date);
                if (dateA < dateB) {
                    return -1;
                } else if (dateA > dateB) {
                    return 1;
                }
                return 0;
            });
            $('#upcomingElections').removeClass('hide-it');
            var ballotDates = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = ballots[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var ballot = _step2.value;

                    var cancelled = !!ballot.cancelled;
                    var replaced = !!ballot.replaced_by;
                    var replaces = !!ballot.replaces;
                    if (!cancelled && !replaced) {
                        ballotDates.push(formatDate(new Date(ballot.poll_open_date)));
                    }
                    var description = '';
                    if (replaced) {
                        description += '<p>' + (cancelled ? 'Cancelled and ' : '') + ('Replaced by <a href="#' + ballot.replaced_by + '">another ballot</a>.</p>');
                    } else if (replaces && !cancelled) {
                        description += '<p>Replaces <a href="#' + ballot.replaces + '">another ballot</a>.</p>';
                    } else if (cancelled) {
                        description += '<p>Cancelled</p>';
                    }
                    var candidatesInject = '';
                    if (ballot.candidates && ballot.candidates.length > 0) {
                        var candidates = ballot.candidates.sort(function (a, b) {
                            return a.list_position - b.list_position;
                        });
                        candidatesInject += '<h4>Candidates</h4><ul>';
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = candidates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var candidate = _step3.value;

                                candidatesInject += '<li><h6>' + candidate.person.name + '</h6><p>' + candidate.party.party_name + '</p></li>';
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        candidatesInject += '</ul>';
                    }
                    var buttonUrl = customFinder || '';
                    var buttonClass = '';
                    if (buttonUrl == '') {
                        buttonClass = 'hide-it-definite';
                    }
                    var panelDisplayClass = candidatesInject != '' ? '' : description != '' ? '' : buttonUrl != '' ? '' : 'hide-it-definite';
                    var inject = '<div class="panel panel-default" id="' + ballot.ballot_paper_id + '" aria-expanded="true">\n                        <div class="panel-heading-inner" role="tab" id="heading-' + ballot.ballot_paper_id + '">' + (
                    // <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapse-${ballot.ballot_paper_id}" aria-expanded="true" aria-controls="collapse-${ballot.election_id}" class="">
                    '<h2 class="gtm--accordion__click">\n                                    ' + ballot.election_name + ', ' + ballot.post_name + '\n                                    <small style="padding-left: 1rem; white-space: nowrap">' + formatDate(new Date(ballot.poll_open_date)) + '</small>\n                                </h2>') + (
                    // </a>
                    '</div>\n                        <div id="collapse-' + ballot.ballot_paper_id + '" class="panel-collapse" role="tabpanel" aria-labelledby="collapse-' + ballot.ballot_paper_id + '" aria-expanded="true">\n                            <div class="panel-body ' + panelDisplayClass + '">\n                                <div class="row">\n                                    <div class="col-md-6">\n                                        ' + candidatesInject + '\n                                    </div>\n                                    <div class="col-md-4">\n                                        <!--h4>' + ballot.post_name + '</h4-->\n                                        <!--h5>Local elections will take place on ' + formatDate(new Date(ballot.poll_open_date)) + '</h5-->\n                                        ' + description + '\n                                    </div>\n                                    <div class="col-md-2 clearfix">\n                                        <a href="' + buttonUrl + '" class="pull-right button button--shadow ' + buttonClass + '">' + registerText + '</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>');
                    $('#accordion').append(inject);
                }
                // Print the election dates
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            ballotDates = [].concat(_toConsumableArray(new Set(ballotDates)));
            var ballotDatesLength = ballotDates.length;
            var ballotDatesText = "";
            for (var i = 0; i < ballotDatesLength; i++) {
                if (i !== 0 && ballotDatesLength > 1) {
                    ballotDatesText += ',';
                }
                if (i === ballotDatesLength - 1 && ballotDatesLength > 1) {
                    ballotDatesText += ' and ';
                }
                ballotDatesText += ballotDates[i];
            }
            $('#election-dates > p').text("Local elections will take place on " + ballotDatesText + ".");
            // Initialise functionality for Ward accordion
            $('.panel-heading-inner > a').click(function (event) {
                event.preventDefault();
                var parent = $(this).parent().parent(); // .panel
                var isExpanded = parent.attr('aria-expanded');
                if (isExpanded == 'true') {
                    parent.attr('aria-expanded', 'false');
                    $(this).addClass('collapsed');
                    $(this).attr('aria-expanded', 'false');
                    parent.children('.panel-collapse').addClass('collapse');
                } else {
                    parent.attr('aria-expanded', 'true');
                    $(this).removeClass('collapsed');
                    $(this).attr('aria-expanded', 'true');
                    parent.children('.panel-collapse').removeClass('collapse');
                }
            });
        }

        $('#nearestPollingStationWrapper').removeClass('hide-it');
        // Need to check elsewhere for polling station info
        if (!!customFinder) {
            $('#customFinder').show();
            $('#customFinder > a').attr('href', customFinder);
        }
        // There is one polling station
        else if (!!onePollingStation) {
                $('#onePollingStation').show();
                $('#polling-station').append('<p>' + onePollingStation.properties.address.replace(/\n/g, "<br>") + '<br>' + onePollingStation.properties.postcode + '</p>');
            }
            // There is no known polling station
            else {
                    $('#empty').show();
                }
    }
    // There are multiple possible addresses for polling stations
    // Show a <select> and have the user pick
    else {
            $('#nearestPollingStationWrapper').removeClass('hide-it');
            $('#multipleAddresses').show();
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = addresses[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var address = _step6.value;

                    $('#pollingStationAddresses').append('<option value="' + address.slug + '">' + address.address + '</option>');
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            $('#pollingStationAddresses').change(function (event) {
                $('#multipleAddresses').hide();
                var addressSlug = $(this).val();
                jQuery.ajax({
                    dataType: "json",
                    url: getDC,
                    data: "address=" + addressSlug,
                    success: function success(data) {
                        printDataLocalArea(data);
                    }
                });
            });
        }
};

// 6.3 Prints council information based on the postcode
var printDataElectoralServices = function printDataElectoralServices(data) {
    var electoralServices = data.electoral_services;
    var councilID = !!electoralServices ? electoralServices.council_id : null;
    var officeDataToAppend = '';
    if (!!councilID) {
        // Data from DC API
        if (electoralServices.name) {
            officeDataToAppend += electoralServices.name + '<br>';
        }
        if (electoralServices.address) {
            officeDataToAppend += electoralServices.address.replace(/\n/g, "<br>") + '<br>';
        }
        if (electoralServices.postcode) {
            officeDataToAppend += electoralServices.postcode + '<br>';
        }
        if (electoralServices.phone) {
            officeDataToAppend += '<a href="tel:' + electoralServices.phone + '">' + electoralServices.phone + '</a><br>';
        }
        if (electoralServices.email) {
            officeDataToAppend += '<a href="mailto:' + electoralServices.email + '">' + electoralServices.email + '</a><br>';
        }
        if (electoralServices.website) {
            officeDataToAppend += '<a href="' + electoralServices.website + '" target="_blank">' + electoralServices.website + '</a><br>';
        }
        // Append Office data
        $('#nearestRegistrationOffice').find('.linear-box__address').html('<p>' + officeDataToAppend + '</p>');
        $('#nearestRegistrationOffice').slideDown(150);
    } else {
        // Fallback to data stored in Matrix (Voting Locations #221458)
        jQuery.ajax({
            dataType: "json",
            url: searchOffice + '/_nocache',
            data: "queries_distcode_query=" + councilID,
            success: function success(districtCodeData) {
                var electoralServices = districtCodeData.registrationOffice;
                if (electoralServices.office) {
                    officeDataToAppend += electoralServices.office + '<br>';
                }
                if (electoralServices.address1) {
                    officeDataToAppend += electoralServices.address1 + '<br>';
                }
                if (electoralServices.address2) {
                    officeDataToAppend += electoralServices.address2 + '<br>';
                }
                if (electoralServices.address3) {
                    officeDataToAppend += electoralServices.address3 + '<br>';
                }
                if (electoralServices.address4) {
                    officeDataToAppend += electoralServices.address4 + '<br>';
                }
                if (electoralServices.city) {
                    officeDataToAppend += electoralServices.city + '<br>';
                }
                if (electoralServices.postcode) {
                    officeDataToAppend += electoralServices.postcode + '<br>';
                }
                if (electoralServices.telephone) {
                    officeDataToAppend += '<a href="tel:' + electoralServices.telephone + '">' + electoralServices.telephone + '</a><br>';
                }
                if (electoralServices.email) {
                    officeDataToAppend += '<a href="mailto:' + electoralServices.email + '">' + electoralServices.email + '</a><br>';
                }
                if (electoralServices.website) {
                    officeDataToAppend += '<a href="' + electoralServices.website + '" target="_blank">' + electoralServices.website + '</a><br>';
                }
                // Append Office data
                $('#nearestRegistrationOffice').find('.linear-box__address').html('<p>' + officeDataToAppend + '</p>');
                $('#nearestRegistrationOffice').slideDown(150);
            },
            fail: function fail() {
                $('postcodeResultsRestrictedWrapper').show();
            },
            complete: function complete() {}
        });
    }
};

// 6.4 Data for particular postcode
// Pulls data for particular area after NewDistrictCode is
// provided by loadYourLocalArea() and prints it on Location
// Results page
var loadDataLocalArea = function loadDataLocalArea(code, postcode, country) {
    jQuery.ajax({
        url: searchOffice + "?queries_distcode_query=" + code,
        dataType: 'json',
        success: function success(data) {
            if ($('#postcodeResultsWrapper').length > 0) {
                registrationOfficeAddress();
            }
            //registrationOfficeAddress();

            // Register Button
            var registerButtonData = data["registerButton"],
                registerButtonDataToAppend = '';

            // Registration Office
            var officeData = data["registrationOffice"],
                officeDataSize = Object.keys(officeData).length,
                officeDataToAppend = '';

            Object.keys(officeData).map(function (i, e) {
                if (i == "website") {
                    officeDataToAppend += '<a href="http://' + officeData[i] + '" target="_blank">' + officeData[i] + '</a>';
                } else if (i == "email") {
                    officeDataToAppend += '<a href="mailto:' + officeData[i] + '">' + officeData[i] + '</a><br/>';
                } else if (officeData[i].length > 0) {
                    officeDataToAppend += officeData[i] + '<br/>';
                }
            });

            $('#nearestRegistrationOffice').find('.linear-box__address').html('<p>' + officeDataToAppend + '</p>');
            $('#nearestRegistrationOffice').slideDown(150);

            // Upcoming elections
            var upcomingElData = data["elections"],
                upcomingElDataSize = 0,
                upcomingElToAppend = '';

            for (var z in upcomingElData) {
                if (upcomingElData[z].title.length > 0) {
                    upcomingElDataSize++;
                }
            }

            if (data['switch'].pollingstation != 'false') {
                pollingStationAddress();
                $('#nearestPollingStationWrapper').removeClass('hide-it');
            }

            if (upcomingElDataSize > 0) {
                Object.keys(upcomingElData).map(function (i, e) {
                    var _title = '',
                        _description = '',
                        _id = '',
                        _candidates = '',
                        print = false,
                        printCandidates = true,
                        printRegisterButton = true;

                    if (upcomingElData[i].title != '') {

                        Object.keys(upcomingElData[i]).map(function (j, e) {

                            if (j == "title") {
                                _title = upcomingElData[i][j];
                                if (upcomingElData[i][j] != '') {
                                    print = true;
                                }
                            } else if (j == 'description') {
                                _description = upcomingElData[i][j];
                            } else if (j == 'id') {
                                _id = upcomingElData[i][j];
                            } else if (j == 'switch') {
                                if (upcomingElData[i][j] == 'false') {
                                    printCandidates = false;
                                }
                            } else if (j == 'registerButton') {
                                if (upcomingElData[i][j] == 'false') {
                                    printRegisterButton = false;
                                }
                            }
                        });

                        jQuery.ajax({
                            dataType: "html",
                            url: getCandidates,
                            data: "query=" + postcode + "&electionid=" + _id,
                            success: function success(data) {
                                if (printCandidates) {
                                    _candidates = data;
                                }

                                if (country == "Northern Ireland") {
                                    registerButtonDataToAppend = registerButtonData.ni;
                                } else {
                                    registerButtonDataToAppend = registerButtonData.other;
                                }

                                if (print) {
                                    upcomingElToAppend += singleElectionAccordion(_title, _description, _candidates, registerButtonDataToAppend, printRegisterButton, e);
                                }

                                if (upcomingElToAppend.length > 0) {
                                    $('#upcomingElections').find('.panel-group').html('').append(upcomingElToAppend);
                                }
                                $('#upcomingElections').fadeIn(150);
                            }
                        });
                    }
                });
            } else {
                $('#upcomingElections').fadeIn(150);
            };
        },
        error: function error(xhr, ajaxOptions, thrownError) {
            console.log(xhr.status, thrownError);
        }
    });
};

// 6.5 Upcoming Elections Template
// Template for printing accordion with single upcoming election
// on Location Results page
var singleElectionAccordion = function singleElectionAccordion(title, description, candidates, button, showButton, i) {
    var accordionID = title.replace(new RegExp(' ', 'g'), '-').replace(new RegExp(':', 'g'), '-'),
        ariaExpanded = false,
        accordionClass = '',
        registerButtonClass = '';

    ariaExpanded = true;
    accordionClass = 'in';

    if (!showButton) {
        registerButtonClass = 'hide-it-definite';
    }

    return '\n  <div class="panel panel-default">\n    <div class="panel-heading" role="tab" id="headingOne">\n        <a class="gtm--accordion__click" role="button" data-toggle="collapse" data-parent="#accordion" href="#' + accordionID + '" aria-expanded="' + ariaExpanded + '" aria-controls="' + accordionID + '">\n          <h2 data-content=\'-\'>' + title + '</h2>\n        </a>\n    </div>\n    <div id="' + accordionID + '" class="panel-collapse collapse ' + accordionClass + '" role="tabpanel" aria-labelledby="headingOne">\n      <div class="panel-body">\n        <div class="row">\n          <div class="col-md-8">\n            ' + description + '\n          </div>\n          <div class="col-md-4 clearfix">\n            <a href="' + button + '" class="pull-right button button--shadow ' + registerButtonClass + '">' + registerText + '</a>\n          </div>\n          <div class="col-md-12">\n            ' + candidates + '\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>';
};

// 6.6 Polling stations address
var pollingStationAddress = function pollingStationAddress() {
    var select = $('#pollingStationAddresses');

    if (select.length > 0) {
        select.on('change', function (ev) {
            var url = this.value;

            url = url.split('https://wheredoivote.co.uk/api/beta/address/');

            jQuery.ajax({
                dataType: "html",
                url: pollingStations + '?auth_token=c2fb3afb651679324a85fc2b9aab1d4a9039b48a&query=' + url[1],
                success: function success(json) {
                    $('.pollingStationOutput').fadeOut(300);

                    setTimeout(function () {
                        $('.pollingStationOutput').html('<p>' + json + '</p>');
                        $('.pollingStationOutput').fadeIn(500);
                    }, 200);
                }
            });
        });
    }
};

// 6.7 Nearest Registration Office address
var registrationOfficeAddress = function registrationOfficeAddress() {
    var getParameters = getSearchParameters();
    $.ajax({
        type: 'GET',
        url: '__wheredoivote',
        data: {
            "postcode": decodeURI(getParameters.query).replace(' ', '')
        },
        success: function success(response) {
            var wrapper = $('#nearestPollingStation');
            // Check if endpoint has address of polling station
            var customFinder = response.custom_finder != null ? true : false;
            var empty = response.polling_station_known || response.custom_finder || response.addresses.length ? false : true;
            var onePollingStation = response.polling_station_known ? true : false;
            var multipleAddresses = response.addresses.length ? true : false;

            if (onePollingStation) {
                var address = response.polling_station.properties.address,
                    postcode = response.polling_station.properties.postcode,
                    optionWrapper = $('#onePollingStation');

                address = address.replace(new RegExp('(,|\\n)', 'g'), '<br/>');
                optionWrapper.append(address);
                optionWrapper.append('<br>' + postcode);
                optionWrapper.fadeIn();
            }

            if (empty) {
                var _optionWrapper = $('#empty');
                _optionWrapper.fadeIn();
            }

            if (multipleAddresses) {
                var multipleAddressesWrapper = $('#multipleAddresses');
                var selectWrapper = $('#pollingStationAddresses');
                response.addresses.map(function (item, i) {
                    selectWrapper.append('<option value="' + item.url + '">' + item.address + '</option>');
                });
                multipleAddressesWrapper.fadeIn();
            }

            if (customFinder) {
                var customFinderWrapper = $('#customFinder');

                customFinderWrapper.find('a').attr('href', response.custom_finder);
                customFinderWrapper.fadeIn();
            }
        },
        error: function error() {
            console.warn('Nearest Polling Station endpoint error');
        }
    });
};

// Changes language links on postcode lookup subpage
// It was make to prevent caching of links on this supage, as it uses Edge to cache stuff
var languageUrlChange = function languageUrlChange() {
    if ($('#postcodeResultsWrapper').length > 0) {
        var currentURL = window.location.href;

        if (currentURL.match('/cymru/') != null) {
            // Cymru Context
            $('.header__languages a:first-child').attr('href', currentURL);
            $('.header__languages a:last-child').attr('href', currentURL.replace('/cymru', ''));
        } else {
            // English Context
            $('.header__languages a:first-child').attr('href', currentURL.replace('.co.uk/', '.co.uk/cymru/'));
            $('.header__languages a:last-child').attr('href', currentURL);
        }
    }
};

// Helper Functions

// Get's GET parameters from URL
function getSearchParameters() {
    var prmstr = window.location.search.substr(1);
    return prmstr != null && prmstr != "" ? transformToAssocArray(prmstr) : {};
}

// Creates array from GET parameters
function transformToAssocArray(prmstr) {
    var params = {};
    var prmarr = prmstr.split("&");
    for (var i = 0; i < prmarr.length; i++) {
        var tmparr = prmarr[i].split("=");
        params[tmparr[0]] = tmparr[1];
    }
    return params;
}

// Ajax the feeback form
function ajaxFeedBackForm() {
    if ($('.js_ajaxFeedBackForm').length) {

        $('.js_ajaxFeedBackForm').submit(function (event) {
            event.preventDefault(); //prevent default action

            var form = new FormData($(".js_ajaxFeedBackForm")[0]);
            form.append($('.button__form')[0].name, $('.button__form')[0].value);

            // var feedbackUrl = window.location.href.replace("#pagefeedback","/_nocache");
            var feedbackUrl = $(this).attr('action');

            $.ajax({
                url: feedbackUrl,
                type: 'post',
                data: form,
                contentType: false,
                processData: false,
                method: 'post'
            }).done(function (response) {
                //console.log(response);
                $("#feedbackaccordion").empty().html('Thank you for your feedback');
            });
        });

        // get the current url and pass it to a hidden form field
        if ($('.current-url').length) {
            var thisUrl = window.location.href;
            $('.current-url').val(thisUrl);
        }
    }
}

$(document).ready(function () {
    flexboxBehaviour();
    mobileViewChanges();
    loadYourLocalArea();
    languageUrlChange();
    ajaxFeedBackForm();
});

$(window).resize(function () {
    flexboxBehaviour();
    mobileViewChanges();
});

/*
--------------------
Modules
--------------------
*/

(function ($) {
    'use strict';

    var changeIcon = function changeIcon() {
        $('.panel').map(function (i, e) {
            if ($(e).find('.panel-collapse').hasClass('in')) {
                $(e).find('.panel-heading h2').attr('data-content', '-');
            } else {
                $(e).find('.panel-heading h2').attr('data-content', '+');
            }
        });
    };

    $('.accordions').on('shown.bs.collapse', function () {
        changeIcon();
    });

    $('.accordions').on('hidden.bs.collapse', function () {
        changeIcon();
    });

    $(document).ready(function () {
        var hash = window.location.hash.substr(1);

        changeIcon();
        $('.panel').collapse('hide');
        $('#collapse' + hash).collapse('show');
    });
})(jQuery);

(function ($) {
    'use strict';

    var closeButton = $('.cookies-message__close'),
        cookiesMessage = $('.cookies-message'),
        ifCookie = readCookie('amv-cookies-notification');

    if (!ifCookie) {
        cookiesMessage.show();
        cookiesMessage.css('visibility', 'initial');
    } else {
        cookiesMessage.addClass('no-height');
    }

    closeButton.on('click', function () {
        cookiesMessage.slideUp(200);
        createCookie('amv-cookies-notification', 'accepted', 31);
    });

    function createCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1, c.length);
            }if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function eraseCookie(name) {
        createCookie(name, "", -1);
    }
})(jQuery);

(function ($) {
    'use strict';

    $("#form_email_220248").validate({
        errorClass: 'input--error',
        validClass: 'input--success',
        rules: {
            "q220248:q1": "required",
            "q220248:q2": {
                number: true
            },
            "q220248:q3": {
                required: true,
                email: true
            },
            "q220248:q5": "required"
        },
        messages: {
            "q220248:q1": "Please enter this field",
            "q220248:q2": {
                number: "Please enter proper phone number"
            },
            "q220248:q3": {
                required: "Please enter this field",
                email: "Please enter proper email address"
            },
            "q220248:q5": "Please enter this field"
        }
    });
})(jQuery);

(function ($) {

    // Prevent Default behaviour of submit button until the input field is open
    // removes class blocking default behaviour after input is ready to type text
    var searchOpen = function searchOpen() {
        var searchButton = $('.header__search button'),
            searchInput = $('.header__search input');
    };

    // Main navigation with .5s delay on mouseover
    var navigation = function navigation() {
        var navigation = $('.header__navigation'),
            firstLevel = $('.header__navigation--firstlevel li'),
            firstLevelLink = $('.header__navigation--mainlink'),
            secondLevel = $('.header__navigation--secondlevel'),
            mobileButton = $('.header__mobile--button'),
            delay = 300;

        var setTimeoutConst = void 0;

        if ($(window).width() > 768) {
            firstLevel.hover(function () {
                var _this = $(this);
                setTimeoutConst = setTimeout(function () {
                    _this.find('ul').show();
                }, delay);
            }, function () {
                clearTimeout(setTimeoutConst);
                $(this).find('ul').hide();
            });
        }

        mobileButton.on('click', function () {
            navigation.slideToggle(200);
        });

        firstLevelLink.on('click', function (e) {
            console.log(e);
            if ($(window).width() < 769) {
                event.preventDefault();
                secondLevel.slideUp();
                if ($(this).hasClass('active')) {
                    $(this).siblings('ul').slideUp();
                    $(this).removeClass('active');
                } else {
                    $(this).siblings('ul').slideDown();
                    $(this).addClass('active');
                }
            }
        });
    };

    var showNav = debounce(function () {
        if ($(window).width() > 768) {
            $('.header__navigation').show();
        }
    });
    var fb_server = 'https://ec2-search01.squiz.co.uk';
    var fb_collection_faq = context === 'CYMRU' ? '-welsh' : '';
    var fb_collection_articles = context === 'CYMRU' ? 'cy' : 'en';

    var fbbaseUrl = fb_server,
        suggestPath = '/s/suggest.json',
        fbcollectionFAQ = fb_collection_faq,
        fbcollectionArticles = fb_collection_articles,
        limit = 4,
        limitGlobal = 5,
        coursesNumber = 0,
        eventsNumber = 0;

    var articlesFB = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: {
            //url: fbbaseUrl + suggestPath + '?collection=ec-aboutmyvote-meta&profile=' + fbcollectionArticles + '&partial_query=%QUERY&show=10&sort=0&alpha=.5',
            url: autosuggestionArticles + '?query=%QUERY',
            wildcard: '%QUERY',
            ajax: {
                dataType: 'jsonp'
            },
            filter: function filter(list) {
                return $.map(list, function (el) {
                    return {
                        value: el
                    };
                });
            }
        }
    });

    var faqFB = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: {
            //url: fbbaseUrl + suggestPath + '?collection=ec-web-aboutmyvote' + fbcollectionFAQ + '&partial_query=%QUERY&show=10&sort=0&alpha=.5&fmt=json',
            url: autosuggestionFAQ + '?query=%QUERY',
            wildcard: '%QUERY',
            ajax: {
                dataType: 'jsonp'
            },
            filter: function filter(list) {
                return $.map(list, function (el) {
                    return {
                        value: el
                    };
                });
            }
        }
    });

    articlesFB.initialize();
    var ttadapterResults = articlesFB.ttAdapter();

    faqFB.initialize();
    var ttadapterResults = faqFB.ttAdapter();

    var detachTypeaheadResults = function detachTypeaheadResults() {
        jQuery('.form-autosuggestion').typeahead('destroy');
    };

    var attachTypeaheadResults = function attachTypeaheadResults() {

        var faqHeader = context === 'CYMRU' ? 'Cwestiynau Cyffredin' : 'FAQs';
        var suggestHeader = context === 'CYMRU' ? 'Awgrymiadau' : 'Suggestions';

        jQuery('.form-autosuggestion').typeahead({
            minLength: 3,
            highlight: true
        }, {
            name: 'suggests',
            display: 'value',
            source: articlesFB,
            limit: 10,
            templates: {
                header: "<h3>" + suggestHeader + "</h3>"
            }
        }, {
            name: 'faqs',
            display: 'value',
            source: faqFB,
            templates: {
                header: "<h3>" + faqHeader + "</h3>"
            }
        });
    };

    jQuery(function () {

        attachTypeaheadResults();
        $('.masthead .form-autosuggestion').bind('typeahead:open', function (ev, suggestion) {
            $('.overlay').fadeIn(100);
            $('body').addClass('search-overlay');
        });

        $('.masthead .form-autosuggestion').bind('typeahead:close', function (ev, suggestion) {
            $('.overlay').fadeOut(100);
            $('body').removeClass('search-overlay');
        });
    });

    // Functions initialization
    $(document).ready(function () {
        searchOpen();
        navigation();
    });

    $(window).resize(function () {
        showNav();
    });
})(jQuery);

(function ($) {
    'use strict';

    var postcodeForm = $('#postcodeForm'),
        postcodeInput = postcodeForm.find('input');
    var postcodeValue = postcodeInput.val();

    // Checks if postcode is valid before it will submit form
    var postcodeValidation = function () {
        postcodeForm.find('button').on('click', function (event) {
            var postcode = postcodeInput.val();
            postcodeCheck(postcode, true);
            event.preventDefault();
        });

        if (postcodeForm.hasClass('form-error')) {
            postcodeForm.find('input').keyup(function (event) {
                if (postcodeValue != postcodeInput.val().length) {
                    setTimeout(function () {
                        var postcode = postcodeInput.val();
                        postcodeCheck(postcode, false);
                    }, 300);
                }
                postcodeValue = postcodeInput.val().length;
            });
        }
    }();

    // Ajax request to MapIt API for checking if postcode is correct
    var postcodeCheck = function postcodeCheck(postcode, send) {
        $.ajax({
            url: (postcodeLookup ? postcodeLookup : getNewDC ? getNewDC : getDC) + '?postcode=' + postcode,
            dataType: 'json',
            success: function success(data) {
                if (send) {
                    if (data.Items.length > 0) {
                        if (data.Items[0].Error) {
                            postcodeForm.addClass('form-error');
                        } else {
                            postcodeForm.submit();
                            postcodeForm.removeClass('form-error');
                        }
                    } else if (data.Items.length === 0) {
                        postcodeForm.addClass('form-error');
                    }
                }
            },
            error: function error() {}
        });
    };
})(jQuery);

(function ($) {
    'use strict';

    $('.masthead__slidedown a').on('click', function () {
        $('#content').ScrollTo();
    });
})(jQuery);

(function ($) {
    'use strict';
})(jQuery);
$.fn.goTo = function () {
    $('html, body').animate({
        scrollTop: $(this).offset().top + 'px'
    }, 'fast');
    return this;
};

var loadData = function loadData(url) {
    $.ajax({
        url: restUrl + url,
        type: 'get',
        success: function success(data, status) {
            $('#searchResults').html(data);
            $('#searchResults').css("opacity", 1);
            updateRest('.page-pagination__item');
            updateRest('.sidebar__list--filters li');
        }
    });
};

var updateRest = function updateRest(item) {
    $(item).on('click', function () {
        var url = $(this).attr('data-url');
        $('#searchResults').goTo();
        $('#searchResults').css("opacity", 0.4);
        loadData(url);
    });
};

$('.masthead .form-autosuggestion').bind('typeahead:close', function (ev, suggestion) {
    $('.overlay').fadeOut(100);
    $('body').removeClass('search-overlay');
});

updateRest('.page-pagination__item');
updateRest('.sidebar__list--filters li');

(function ($) {
    'use strict';
})(jQuery);
//# sourceMappingURL=global.min.js.map
